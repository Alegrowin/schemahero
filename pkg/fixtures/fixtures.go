package fixtures

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	schemasv1alpha1 "github.com/schemahero/schemahero/pkg/apis/schemas/v1alpha1"
	"github.com/schemahero/schemahero/pkg/database/postgres"
	"github.com/spf13/viper"
	"gopkg.in/yaml.v2"
)

type Fixturator struct {
	Viper *viper.Viper
}

func NewFixturator() *Fixturator {
	return &Fixturator{
		Viper: viper.GetViper(),
	}
}

func (f *Fixturator) RunSync() error {
	fmt.Printf("generating fixtures for resources in %s\n", f.Viper.GetString("input-dir"))

	statements := []string{}
	handleFile := func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if info.IsDir() {
			return nil
		}

		fileData, err := ioutil.ReadFile(filepath.Join(f.Viper.GetString("input-dir"), info.Name()))
		if err != nil {
			return err
		}

		parsed := schemasv1alpha1.Table{}
		if err := yaml.Unmarshal(fileData, &parsed); err != nil {
			fmt.Printf("%s\n", err)
			return err
		}

		if parsed.Spec.Schema == nil {
			fmt.Printf("skipping file %s because there is no schema\n", info.Name())
			return nil
		}

		if f.Viper.GetString("driver") == "postgres" {
			if parsed.Spec.Schema.Postgres == nil {
				fmt.Printf("skipping file %s because there is no postgres spec\n", info.Name())
			}

			statement, err := postgres.CreateTableStatement(parsed.Spec.Name, parsed.Spec.Schema.Postgres)
			if err != nil {
				return err
			}

			statements = append(statements, statement)
		}
		return nil
	}

	err := filepath.Walk(f.Viper.GetString("input-dir"), handleFile)
	if err != nil {
		fmt.Printf("%#v\n", err)
		return err
	}

	output := strings.Join(statements, ";\n")
	output = fmt.Sprintf("/* Auto generated file. Do not edit by hand. This file was generated by SchemaHero. */\n\n %s;\n\n", output)

	if _, err := os.Stat(f.Viper.GetString("output-dir")); os.IsNotExist(err) {
		os.MkdirAll(f.Viper.GetString("output-dir"), 0755)
	}

	err = ioutil.WriteFile(filepath.Join(f.Viper.GetString("output-dir"), "fixtures.sql"), []byte(output), 0644)
	if err != nil {
		fmt.Printf("%#v\n", err)
		return err
	}

	return nil
}
